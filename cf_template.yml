AWSTemplateFormatVersion: 2010-09-09
Description: "High Availability API infrastructure with 2 AZs, public/private subnets, and Nginx load balancer"

Mappings:
    SubnetConfig:
      VPC:
        CIDR: "10.0.0.0/16"
      PublicSubnetAZ1:
        CIDR: "10.0.1.0/24"
      PublicSubnetAZ2:
        CIDR: "10.0.2.0/24"
      PrivateSubnetAZ1:
        CIDR: "10.0.11.0/24"
      PrivateSubnetAZ2:
        CIDR: "10.0.12.0/24"

Resources:
  # IAM Role for SSM
  SSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-SSM-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: Name
          Value: "SSM-Role"

  SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "EC2-SSM-Profile"
      Roles:
        - !Ref SSMRole

  # VPC Configuration
  VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "VPC"
            - "CIDR"
        Tags:
          - Key: Name
            Value: "API-VPC"

  # Internet Gateway
  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          - Key: Name
            Value: "API-IGW"

  AttachGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetAZ1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PublicSubnetAZ1"
            - "CIDR"
        AvailabilityZone: !Select [0, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: "Public-Subnet-AZ1"

  PublicSubnetAZ2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PublicSubnetAZ2"
            - "CIDR"
        AvailabilityZone: !Select [1, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: "Public-Subnet-AZ2"

  # Private Subnets
  PrivateSubnetAZ1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubnetAZ1"
            - "CIDR"
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: "Private-Subnet-AZ1"

  PrivateSubnetAZ2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock:
          Fn::FindInMap:
            - "SubnetConfig"
            - "PrivateSubnetAZ2"
            - "CIDR"
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: "Private-Subnet-AZ2"

  # Route Tables
  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: "Public-Route-Table"

  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway

  PublicSubnetAZ1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetAZ1
        RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ2RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetAZ2
        RouteTableId: !Ref PublicRouteTable

  # NAT Gateway
  NATGatewayEIP:
    Type: "AWS::EC2::EIP"
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "NAT-Gateway-EIP"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
        - Key: Name
          Value: "NAT-Gateway"

  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: "Private-Route-Table"

  PrivateSubnetAZ1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetAZ1
        RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetAZ2RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetAZ2
        RouteTableId: !Ref PrivateRouteTable

  # Route for Private Subnets to NAT Gateway
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  # Security Groups
  TraefikSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for Traefik load balancer"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0  # Traefik Dashboard - Consider restricting this
        Tags:
          - Key: Name
            Value: "Traefik-SG"

  WebServerSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for web servers"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref TraefikSecurityGroup
        Tags:
          - Key: Name
            Value: "WebServer-SG"

  # EFS Security Group
  EFSSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for EFS mount targets"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 2049
            ToPort: 2049
            SourceSecurityGroupId: !Ref WebServerSecurityGroup
        Tags:
          - Key: Name
            Value: "EFS-SG"

  # Traefik Load Balancer Instance
  TraefikInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0150ccaf51ab55a51'  # Amazon Linux 2
      SubnetId: !Ref PublicSubnetAZ1
      SecurityGroupIds:
        - !Ref TraefikSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install Docker
          yum install -y docker git
          service docker start
          usermod -a -G docker ec2-user
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Create Traefik directory structure
          mkdir -p /opt/traefik/{config,certs}
          
          # Create Traefik configuration
          cat > /opt/traefik/traefik.yml << 'EOF'
          api:
            dashboard: true
            debug: true
          
          entryPoints:
            web:
              address: ":80"
              http:
                redirections:
                  entryPoint:
                    to: websecure
                    scheme: https
            websecure:
              address: ":443"
          
          providers:
            docker:
              endpoint: "unix:///var/run/docker.sock"
              exposedByDefault: false
              network: web
            file:
              directory: /config
              watch: true
          
          certificatesResolvers:
            letsencrypt:
              acme:
                email: admin@example.com  # Change this
                storage: /certs/acme.json
                httpChallenge:
                  entryPoint: web
          
          log:
            level: INFO
          
          accessLog: {}
          EOF
          
          # Create docker-compose.yml for Traefik
          cat > /opt/traefik/docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            traefik:
              image: traefik:v3.0
              container_name: traefik
              restart: unless-stopped
              security_opt:
                - no-new-privileges:true
              ports:
                - "80:80"
                - "443:443"
                - "8080:8080"
              volumes:
                - /etc/localtime:/etc/localtime:ro
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - ./traefik.yml:/traefik.yml:ro
                - ./config:/config:ro
                - ./certs:/certs
              networks:
                - web
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.dashboard.rule=Host(\`traefik.${PublicIp}.nip.io\`)"
                - "traefik.http.routers.dashboard.service=api@internal"
                - "traefik.http.routers.dashboard.middlewares=auth"
                - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$YKaGx.JryJ5tKDQJFrLO8uNOgMH5bCGmM9j8H/12MYCQgQr71gO3C"  # admin:admin - CHANGE THIS!
          
          networks:
            web:
              external: true
          EOF
          
          # Create Docker network
          docker network create web
          
          # Set permissions
          chmod 600 /opt/traefik/certs/acme.json 2>/dev/null || touch /opt/traefik/certs/acme.json && chmod 600 /opt/traefik/certs/acme.json
          
          # Start Traefik
          cd /opt/traefik
          docker-compose up -d
          
          # Create systemd service
          cat > /etc/systemd/system/traefik.service << 'EOF'
          [Unit]
          Description=Traefik
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/traefik
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable traefik
      Tags:
        - Key: Name
          Value: "Traefik-LoadBalancer"

  # Web Server Instances
  WebServerAZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0150ccaf51ab55a51'  # Amazon Linux 2
      SubnetId: !Ref PrivateSubnetAZ1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install required tools
          yum install -y telnet jq tree nfs-utils git htop yum-utils
          yum install -y amazon-cloudwatch-agent amazon-efs-utils
          
          # Install Docker
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          
          # Enable Docker to start on boot
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create symlink for docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Mount EFS
          mkdir -p /mnt/efs
          mount -t efs -o tls ${EFSFileSystem}:/ /mnt/efs
          echo "${EFSFileSystem}:/ /mnt/efs efs defaults,_netdev,tls 0 0" >> /etc/fstab
          
          # Create json-storage directory
          mkdir -p /mnt/efs/json-storage
          chmod 755 /mnt/efs/json-storage
          
          # Verify installations
          docker --version
          docker-compose --version
          
          # Join Docker network (same as Traefik)
          docker network create web 2>/dev/null || true
          
          # Clone application repository
          cd /home/ec2-user
          git clone https://github.com/YOUR_REPO/YOUR_APP.git app || echo "Update with your repo URL"
          cd app/docker
          
          # Copy Traefik-enabled compose file if exists
          if [ -f docker-compose.traefik.yml ]; then
            cp docker-compose.traefik.yml docker-compose.yml
          fi
          
          # Set environment variables
          export DOMAIN=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4).nip.io
          echo "DOMAIN=$DOMAIN" >> /etc/environment
          
          # Build and start the application
          docker-compose build
          docker-compose up -d
          
          # Create systemd service for the app
          cat > /etc/systemd/system/api-app.service << 'EOF'
          [Unit]
          Description=API Application
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/home/ec2-user/app/docker
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable api-app
      Tags:
        - Key: Name
          Value: "WebServer-AZ1"

  WebServerAZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0150ccaf51ab55a51'  # Amazon Linux 2
      SubnetId: !Ref PrivateSubnetAZ2
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install required tools
          yum install -y telnet jq tree nfs-utils git htop yum-utils
          yum install -y amazon-cloudwatch-agent amazon-efs-utils
          
          # Install Docker
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          
          # Enable Docker to start on boot
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create symlink for docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Mount EFS
          mkdir -p /mnt/efs
          mount -t efs -o tls ${EFSFileSystem}:/ /mnt/efs
          echo "${EFSFileSystem}:/ /mnt/efs efs defaults,_netdev,tls 0 0" >> /etc/fstab
          
          # Create json-storage directory
          mkdir -p /mnt/efs/json-storage
          chmod 755 /mnt/efs/json-storage
          
          # Verify installations
          docker --version
          docker-compose --version
          
          # Join Docker network (same as Traefik)
          docker network create web 2>/dev/null || true
          
          # Clone application repository
          cd /home/ec2-user
          git clone https://github.com/YOUR_REPO/YOUR_APP.git app || echo "Update with your repo URL"
          cd app/docker
          
          # Copy Traefik-enabled compose file if exists
          if [ -f docker-compose.traefik.yml ]; then
            cp docker-compose.traefik.yml docker-compose.yml
          fi
          
          # Set environment variables
          export DOMAIN=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4).nip.io
          echo "DOMAIN=$DOMAIN" >> /etc/environment
          
          # Build and start the application
          docker-compose build
          docker-compose up -d
          
          # Create systemd service for the app
          cat > /etc/systemd/system/api-app.service << 'EOF'
          [Unit]
          Description=API Application
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/home/ec2-user/app/docker
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl enable api-app
      Tags:
        - Key: Name
          Value: "WebServer-AZ2"

  # EBS Volumes for Web Servers
  WebServerAZ1Volume:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 50
      AvailabilityZone: !GetAtt WebServerAZ1.AvailabilityZone
      Tags:
        - Key: Name
          Value: "WebServer-AZ1-Volume"

  WebServerAZ2Volume:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 50
      AvailabilityZone: !GetAtt WebServerAZ2.AvailabilityZone
      Tags:
        - Key: Name
          Value: "WebServer-AZ2-Volume"

  WebServerAZ1VolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref WebServerAZ1Volume
      InstanceId: !Ref WebServerAZ1

  WebServerAZ2VolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref WebServerAZ2Volume
      InstanceId: !Ref WebServerAZ2

  # EFS File System
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: "API-SharedStorage"

  # EFS Mount Targets
  EFSMountTargetAZ1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnetAZ1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTargetAZ2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnetAZ2
      SecurityGroups:
        - !Ref EFSSecurityGroup

Outputs:
  TraefikPublicIP:
    Description: "Public IP of Traefik Load Balancer"
    Value: !GetAtt TraefikInstance.PublicIp
  
  TraefikDashboard:
    Description: "URL for Traefik Dashboard"
    Value: !Sub "http://${TraefikInstance.PublicIp}:8080"

  EFSFileSystemId:
    Description: "EFS File System ID"
    Value: !Ref EFSFileSystem

  WebServerAZ1PrivateIP:
    Description: "Private IP of Web Server in AZ1"
    Value: !GetAtt WebServerAZ1.PrivateIp

  WebServerAZ2PrivateIP:
    Description: "Private IP of Web Server in AZ2"
    Value: !GetAtt WebServerAZ2.PrivateIp