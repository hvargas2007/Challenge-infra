AWSTemplateFormatVersion: 2010-09-09
Description: "High Availability API infrastructure with 2 AZs, public/private subnets, and traefix load balancer"

Parameters:
  EnvironmentName:
    Type: String
    Default: "API"
    Description: "Environment name prefix for resources"
  
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for VPC"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x"
  
  PublicSubnetAZ1CIDR:
    Type: String
    Default: "10.0.1.0/24"
    Description: "CIDR block for public subnet in AZ1"
  
  PublicSubnetAZ2CIDR:
    Type: String
    Default: "10.0.2.0/24"
    Description: "CIDR block for public subnet in AZ2"
  
  PrivateSubnetAZ1CIDR:
    Type: String
    Default: "10.0.11.0/24"
    Description: "CIDR block for private subnet in AZ1"
  
  PrivateSubnetAZ2CIDR:
    Type: String
    Default: "10.0.12.0/24"
    Description: "CIDR block for private subnet in AZ2"
  
  InstanceType:
    Type: String
    Default: "t2.micro"
    Description: "EC2 instance type"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
  
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: "AMI ID for EC2 instances"
  
  EBSVolumeSize:
    Type: Number
    Default: 50
    Description: "Size of EBS volumes in GB"
    MinValue: 8
    MaxValue: 1000
  
  TraefikDashboardAccess:
    Type: String
    Default: "0.0.0.0/0"
    Description: "CIDR block for Traefik dashboard access (restrict in production)"
  
  EnableEFSEncryption:
    Type: String
    Default: "true"
    Description: "Enable encryption for EFS"
    AllowedValues:
      - "true"
      - "false"
  
  ECRImageRetentionCount:
    Type: Number
    Default: 10
    Description: "Number of ECR images to retain"
    MinValue: 1
    MaxValue: 100


Resources:
  # IAM Role for SSM
  SSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${EnvironmentName}-EC2-SSM-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-SSM-Role"

  SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "${EnvironmentName}-EC2-SSM-Profile"
      Roles:
        - !Ref SSMRole

  # VPC Configuration
  VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock: !Ref VpcCIDR
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-VPC"

  # Internet Gateway
  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-IGW"

  AttachGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetAZ1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnetAZ1CIDR
        AvailabilityZone: !Select [0, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Public-Subnet-AZ1"

  PublicSubnetAZ2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnetAZ2CIDR
        AvailabilityZone: !Select [1, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Public-Subnet-AZ2"

  # Private Subnets
  PrivateSubnetAZ1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnetAZ1CIDR
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Private-Subnet-AZ1"

  PrivateSubnetAZ2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnetAZ2CIDR
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Private-Subnet-AZ2"

  # Route Tables
  PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Public-Route-Table"

  PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway

  PublicSubnetAZ1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetAZ1
        RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ2RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PublicSubnetAZ2
        RouteTableId: !Ref PublicRouteTable

  # NAT Gateway
  NATGatewayEIP:
    Type: "AWS::EC2::EIP"
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-NAT-Gateway-EIP"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-NAT-Gateway"

  PrivateRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Private-Route-Table"

  PrivateSubnetAZ1RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetAZ1
        RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetAZ2RouteTableAssociation:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref PrivateSubnetAZ2
        RouteTableId: !Ref PrivateRouteTable

  # Route for Private Subnets to NAT Gateway
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  # Security Groups
  TraefikSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for Traefik load balancer"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: !Ref TraefikDashboardAccess
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-Traefik-SG"

  WebServerSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for web servers"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref TraefikSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-WebServer-SG"

  # EFS Security Group
  EFSSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security group for EFS mount targets"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 2049
            ToPort: 2049
            SourceSecurityGroupId: !Ref WebServerSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName}-EFS-SG"

  # Traefik Load Balancer Instance
  TraefikInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !Ref PublicSubnetAZ1
      SecurityGroupIds:
        - !Ref TraefikSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install Docker
          yum install -y docker git
          service docker start
          usermod -a -G docker ec2-user
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Verify installations
          docker --version
          docker-compose --version
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-Traefik-LoadBalancer"

  # Web Server Instances
  WebServerAZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !Ref PrivateSubnetAZ1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install required tools
          yum install -y telnet jq tree nfs-utils git htop yum-utils
          yum install -y amazon-cloudwatch-agent amazon-efs-utils
          
          # Install Docker
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          
          # Enable Docker to start on boot
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create symlink for docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Mount EFS
          mkdir -p /mnt/efs
          mount -t efs -o tls ${EFSFileSystem}:/ /mnt/efs
          echo "${EFSFileSystem}:/ /mnt/efs efs defaults,_netdev,tls 0 0" >> /etc/fstab
          
          # Create json-storage directory
          mkdir -p /mnt/efs/json-storage
          chmod 755 /mnt/efs/json-storage
          
          # Verify installations
          docker --version
          docker-compose --version
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-AZ1"

  WebServerAZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      SubnetId: !Ref PrivateSubnetAZ2
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update the system
          yum update -y
          
          # Install required tools
          yum install -y telnet jq tree nfs-utils git htop yum-utils
          yum install -y amazon-cloudwatch-agent amazon-efs-utils
          
          # Install Docker
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          
          # Enable Docker to start on boot
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create symlink for docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Mount EFS
          mkdir -p /mnt/efs
          mount -t efs -o tls ${EFSFileSystem}:/ /mnt/efs
          echo "${EFSFileSystem}:/ /mnt/efs efs defaults,_netdev,tls 0 0" >> /etc/fstab
          
          # Create json-storage directory
          mkdir -p /mnt/efs/json-storage
          chmod 755 /mnt/efs/json-storage
          
          # Verify installations
          docker --version
          docker-compose --version
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-AZ2"

  # EBS Volumes for Web Servers
  WebServerAZ1Volume:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: !Ref EBSVolumeSize
      AvailabilityZone: !GetAtt WebServerAZ1.AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-AZ1-Volume"

  WebServerAZ2Volume:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: !Ref EBSVolumeSize
      AvailabilityZone: !GetAtt WebServerAZ2.AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-WebServer-AZ2-Volume"

  WebServerAZ1VolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref WebServerAZ1Volume
      InstanceId: !Ref WebServerAZ1

  WebServerAZ2VolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      Device: '/dev/sdh'
      VolumeId: !Ref WebServerAZ2Volume
      InstanceId: !Ref WebServerAZ2

  # EFS File System
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      Encrypted: !Ref EnableEFSEncryption
      FileSystemTags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-API-SharedStorage"

  # EFS Mount Targets
  EFSMountTargetAZ1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnetAZ1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTargetAZ2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnetAZ2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # ECR Repository for Docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-api-repository"
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: !Sub |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last ${ECRImageRetentionCount} images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": ${ECRImageRetentionCount}
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecr-repository"

Outputs:
  TraefikPublicIP:
    Description: "Public IP of Traefik Load Balancer"
    Value: !GetAtt TraefikInstance.PublicIp
  
  TraefikDashboard:
    Description: "URL for Traefik Dashboard"
    Value: !Sub "http://${TraefikInstance.PublicIp}:8080"

  EFSFileSystemId:
    Description: "EFS File System ID"
    Value: !Ref EFSFileSystem

  WebServerAZ1PrivateIP:
    Description: "Private IP of Web Server in AZ1"
    Value: !GetAtt WebServerAZ1.PrivateIp

  WebServerAZ2PrivateIP:
    Description: "Private IP of Web Server in AZ2"
    Value: !GetAtt WebServerAZ2.PrivateIp

  ECRRepositoryURI:
    Description: "URI of the ECR Repository"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryURI"

  ECRRepositoryName:
    Description: "Name of the ECR Repository"
    Value: !Ref ECRRepository
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryName"